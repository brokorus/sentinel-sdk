// Code generated by go-bindata.
// sources:
// data/main.go.tpl
// DO NOT EDIT!

package testing

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataMainGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8f\xcf\x4e\xc3\x30\x0c\xc6\xcf\xf1\x53\x58\x39\xc0\x2a\x41\x73\xe7\xc6\x05\xc1\x05\x90\xb6\x17\x48\x53\xb7\xb5\x96\x7f\x4a\x1c\x60\x9a\xf6\xee\xa8\x1d\xe3\x66\x7d\x9f\xfc\xfb\xd9\xc6\xe0\x61\xe1\x8a\x5c\xd1\xa2\x50\xc8\xde\x0a\x61\xab\x34\xa2\x24\x9c\x29\x52\x59\x03\x59\x08\x83\xe5\x88\x13\x7b\xc2\x29\x95\x2d\x11\xaa\x82\x03\x47\x5b\x98\x2a\x18\x83\x43\x63\x2f\x38\x9c\xb6\x56\xaf\x35\xc7\x59\x63\xb6\xee\x68\xe7\xeb\xde\x9e\xa2\x70\x24\x8f\x1c\x72\x2a\x52\xfb\x9b\x3f\xde\x0b\xd2\x4f\x26\x27\x34\xae\x2c\x49\x38\x10\x86\x34\xf2\xc4\x34\x62\xb0\xb1\x59\xef\x4f\x3d\xc0\x0d\xb7\x1e\x04\x70\xe5\xe0\x0e\x94\x9e\x59\x96\x36\xf4\x2e\x05\xb3\xd8\xba\xb0\x4b\x25\x9b\xfa\x27\x7c\xac\xe3\xd1\x94\xec\x34\x80\xe2\x90\x3d\xea\xcf\xe7\xc3\xab\x86\x0e\x60\x6a\xd1\x6d\xb4\x5d\x87\x67\x50\x25\xbb\x7e\x4f\xe5\x8b\x76\x77\xff\xe3\x47\x96\x7a\x06\xa5\xde\x36\xdb\x4b\x8b\xee\x69\xfd\xc0\xf7\xef\xf4\xfd\x00\xea\xd2\xc1\x05\x7e\x03\x00\x00\xff\xff\x4b\xdb\x1e\x28\x4c\x01\x00\x00"

func dataMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_dataMainGoTpl,
		"data/main.go.tpl",
	)
}

func dataMainGoTpl() (*asset, error) {
	bytes, err := dataMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/main.go.tpl", size: 332, mode: os.FileMode(420), modTime: time.Unix(1560352325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/main.go.tpl": dataMainGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"main.go.tpl": &bintree{dataMainGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

